{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"en",
				"end_frame"
			],
			[
				"tr",
				"tracklet_temp"
			],
			[
				"index",
				"indexS"
			],
			[
				"ind",
				"indexS"
			],
			[
				"in",
				"indexS"
			],
			[
				"inde",
				"index_s"
			],
			[
				"ele",
				"else"
			],
			[
				"co",
				"color"
			],
			[
				"colo",
				"colorScale"
			],
			[
				"st",
				"start_index"
			],
			[
				"str",
				"start_index"
			],
			[
				"mou",
				"mouse"
			],
			[
				"ar",
				"argument2"
			],
			[
				"mous",
				"mouseout"
			],
			[
				"m",
				"mouseout"
			],
			[
				"lo",
				"log"
			],
			[
				"fa",
				"flag_control"
			],
			[
				"fu",
				"fun\tFunction"
			],
			[
				"cu",
				"cur_data"
			],
			[
				"ran",
				"range_tracklets"
			],
			[
				"le",
				"length"
			],
			[
				"con",
				"console"
			],
			[
				"path",
				"path_data"
			],
			[
				"pa",
				"path_data"
			],
			[
				"fun",
				"function"
			],
			[
				"re",
				"return"
			],
			[
				"s",
				"status"
			],
			[
				"rec",
				"rects"
			],
			[
				"se",
				"select"
			],
			[
				"da",
				"dashGenerator"
			],
			[
				"no",
				"not-allowed\tcursor"
			],
			[
				"cur",
				"cursor\tproperty"
			],
			[
				"is",
				"instanceof"
			],
			[
				"trak",
				"tracklets_num"
			],
			[
				"sle",
				"selected_num"
			],
			[
				"sele",
				"selected"
			],
			[
				"sel",
				"selected_num"
			],
			[
				"end",
				"end_index"
			],
			[
				"star",
				"start_index"
			],
			[
				"new",
				"new_players"
			],
			[
				"c",
				"console"
			],
			[
				"vide",
				"video_obj"
			],
			[
				"n",
				"none\tcursor"
			],
			[
				"de",
				"default"
			],
			[
				"cla",
				"class"
			],
			[
				"ss",
				"status"
			],
			[
				"min",
				"min_end"
			],
			[
				"max",
				"max_start"
			],
			[
				"tra",
				"tracklet"
			],
			[
				"fal",
				"flag_canplaythrough"
			],
			[
				"sl",
				"select"
			],
			[
				"pr",
				"previous"
			],
			[
				"stat",
				"status"
			],
			[
				"inid",
				"initData"
			],
			[
				"get",
				"getTrackletsByFrame"
			],
			[
				"up",
				"update"
			],
			[
				"rem",
				"remove"
			],
			[
				"selected",
				"selected_main"
			],
			[
				"refr",
				"refresh"
			],
			[
				"rect",
				"rect"
			],
			[
				"refre",
				"refreshMonitor"
			],
			[
				"sta",
				"status"
			],
			[
				"play",
				"players"
			],
			[
				"remin",
				"refreshMain"
			],
			[
				"rm",
				"refreshMain"
			],
			[
				"M",
				"initMonitor"
			],
			[
				"tim",
				"timer"
			],
			[
				"for",
				"for\tfor (…) {…} (Improved Native For-Loop)"
			],
			[
				"vid2",
				"vid2y"
			],
			[
				"vi",
				"vid2x"
			],
			[
				"inm",
				"initMain"
			],
			[
				"fi",
				"fill\tproperty"
			],
			[
				"he",
				"height_select"
			],
			[
				"thi",
				"thickness_line"
			],
			[
				"width",
				"width_workspace"
			],
			[
				"a",
				"attr"
			],
			[
				"g",
				"g"
			],
			[
				"vid",
				"vid2x"
			],
			[
				"tras",
				"translate"
			],
			[
				"x2",
				"x2time"
			],
			[
				"ti",
				"time"
			],
			[
				"sou",
				"source_video"
			],
			[
				"ta",
				"tracklets"
			],
			[
				"fo",
				"for\tfor (…) {…} (Improved Native For-Loop)"
			],
			[
				"class",
				"classed"
			],
			[
				"view",
				"viewport"
			],
			[
				"w",
				"w"
			],
			[
				"ge",
				"get\tGet Elements"
			],
			[
				"vie",
				"viewbox"
			],
			[
				"wi",
				"width"
			],
			[
				"un",
				"unwatched"
			],
			[
				"x",
				"x"
			],
			[
				"bu",
				"button_controls"
			],
			[
				"tran",
				"transform"
			],
			[
				"pg",
				"progress_bar"
			],
			[
				"ct",
				"controls"
			],
			[
				"time",
				"timebox"
			],
			[
				"r",
				"r0"
			],
			[
				"pro",
				"progress_bar"
			],
			[
				"sto",
				"stopRecorder"
			],
			[
				"ini",
				"initRecorder"
			],
			[
				"h",
				"h"
			],
			[
				"win",
				"window_width"
			],
			[
				"bo",
				"border\tproperty"
			],
			[
				"ov",
				"overflow\tproperty"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"def",
				"defs\tMethod"
			],
			[
				"Sc",
				"score_R"
			],
			[
				"sc",
				"score_p"
			],
			[
				"init",
				"initEel"
			],
			[
				"ins",
				"insertAfter"
			],
			[
				"b",
				"b"
			],
			[
				"buff",
				"buff"
			],
			[
				"buf",
				"buff"
			],
			[
				"siz",
				"file_size"
			],
			[
				"sub",
				"substr"
			],
			[
				"rea",
				"read_size"
			],
			[
				"req",
				"req"
			],
			[
				"su",
				"suffix"
			],
			[
				"hea",
				"header"
			],
			[
				"res",
				"read_size"
			],
			[
				"Re",
				"Request"
			],
			[
				"size",
				"size_t"
			],
			[
				"my",
				"myprintf"
			],
			[
				"hee",
				"header"
			],
			[
				"her",
				"headers"
			],
			[
				"C",
				"ContentType"
			],
			[
				"skt",
				"socket"
			]
		]
	},
	"buffers":
	[
		{
			"file": "assets/js/birdseye.js",
			"settings":
			{
				"buffer_size": 4564,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "test.html",
			"settings":
			{
				"buffer_size": 698,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "assets/js/base.js",
			"settings":
			{
				"buffer_size": 5200,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "assets/js/monitor.js",
			"settings":
			{
				"buffer_size": 10990,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "function getColorByID(ID){\n\tlet res = (ID/Math.PI) - Math.floor(ID/Math.PI)\n\tlet color = colorScale(res).toString();\n\treturn color;\n}\n\nfunction getIndexbyID(id) {\n\treturn map[id];\n}\n\nfunction isDashed(d) {\n\tfor (var i = d.interpolation.length - 1; i >= 0; i--) {\n\t\t\tif (frame > d.interpolation[i][0] && frame < d.interpolation[i][1] ){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\treturn false;\n}\n\nfunction addLoadEvent(func) {\n\tvar oldonload = window.onload;\n\tif (typeof window.onload != 'function') {\n\t\twindow.onload = func;\n\t} else {\n\t\twindow.onload = function() {\n\t\t\toldonload();\n\t\t\tfunc();\n\t\t}\n\t}\n}\n\nfunction selectTracklet(d){\n\tvar id = d.id\n\tvar index = getIndexbyID(id)\n\tvar cur_status = tracklets[index].status\n\tif ( cur_status == \"selected\") {\n\t\ttracklets[index].status = \"default\";\n\t\tfor (var i = selected.length - 1; i >= 0; i--) {\n\t\t\tif(selected[i].id == id)\n\t\t\t\tselected.splice(i,1);\n\t\t}\n\t\tconsole.log(\"deselectTracklet: \", selected)\n\t}\n\telse{\n\t\tif(cur_status == \"conflicted\")\n\t\t\treturn;\n\t\ttracklets[index].status = \"selected\";\n\t\tselected.push(tracklets[index]);\n\t\tconsole.log(\"selectTracklet: \", selected)\n\t}\n}\n\nfunction setStatus(id, status){\n\tvar index = getIndexbyID(id);\n\tvar cur_status = tracklets[index].status\n\t// console.log(id, cur_status, status)\n\tif(cur_status != \"selected\" && cur_status != \"conflicted\" ){\n\t\ttracklets[index].status = status\t\n\t}\n}\n\n\nfunction getTrackletsByFrame(data, frame){\n\tvar current_tracklets = [];\n\tvar path_tracklets = [];\n\tvar range_tracklets = [];\n\tfor(var i = 0; i < data.length; ++i){\n\t\tmap[data[i].id] = i;\n\t\tvar start_frame = data[i][\"start_frame\"];\n\t\tvar end_frame = data[i][\"end_frame\"];\n\t\tvar flag_conflicted = false;\n\t\tfor (var j = selected.length - 1; j >= 0; j--) {\n\t\t\tvar max_start = d3.max( [selected[j].start_frame, start_frame] )\n\t\t\tvar min_end = d3.min( [selected[j].end_frame, end_frame] ) \n\t\t\tif( max_start < min_end && data[i].status != \"selected\" ) {\n\t\t\t\tflag_conflicted = true;\n\t\t\t\t// console.log(\"max_start\", max_start, \"min_end\", min_end)\n\t\t\t}\n\t\t}\n\t\tif (flag_conflicted||(selected.length==2&&data[i].status!=\"selected\"))\n\t\t\tdata[i].status = \"conflicted\";\n\t\telse if(data[i].status == \"conflicted\")\n\t\t\tdata[i].status = \"default\";\n\t\tif(start_frame <= frame && frame <= end_frame || data[i].status == \"selected\"){\n\t\t\tif (data[i].status == \"selected\" || data[i].status == \"hover\") {\n\t\t\t\tpath_tracklets.push(data[i]);\n\t\t\t}\n\t\t\tcurrent_tracklets.push(data[i]);\n\t\t}\n\n\t\t// WsVer\n\t\tif(data[i][\"start_frame\"] <= frame+future_duration && frame-past_duration <= data[i][\"end_frame\"]&&data[i].status!=\"selected\")\n\t\t\trange_tracklets.push(data[i]);\n\t}\n\treturn [current_tracklets, path_tracklets, range_tracklets];\n\t// return current_tracklets;\n}\n\n\nfunction getCurrentFrame(){\n\treturn Math.floor(d3.select(\"#video\").property(\"currentTime\")*source_video.fps);\n}\n\nfunction merge(){\n\n\tconsole.log(d3.select(\"#wsbuttong-1\").selectAll(\".enable\").size())\n\tif(d3.select(\"#wsbuttong-1\").selectAll(\".enable\").size()==0)\n\t\treturn 0;\n\tconsole.log(\"merge\")\n\n\t//根据id选择对象\n\tvar tracklet1=selected[0],\n\t\ttracklet2=selected[1];\n\n\t//两个box作为关键帧\n\tvar box1=tracklet1.boxes[tracklet1.boxes.length-1],\n\t\tbox2=tracklet2.boxes[0],\n\t\tnum_newboxes=tracklet2.start_frame-tracklet1.end_frame-1;\n\n\t//生成中间box\n\tfor(var i=0;i<num_newboxes;i++){\n\t\tvar w=(i+1)/(num_newboxes+1)//权重\n\t\tvar tempbox=[]\n\t\tfor(var j=0;j<4;j++){\n\t\t\ttempbox.push(Math.round((1-w)*box1[j]+w*box2[j]))\n\t\t}\n\t\ttracklet1.boxes.push(tempbox);\n\t}\n\ttracklet1.interpolation.push([tracklet1.end_frame+1,tracklet2.start_frame-1])//插值数组添加\n\n\t//复制后一个tracklet\n\tfor(var i=0;i<tracklet2.boxes.length;i++){\n\t\ttracklet1.boxes.push(tracklet2.boxes[i]);\n\t}\n\ttracklet1.end_frame=tracklet2.end_frame;\n\n\tfor(var i=0;i<tracklet2.interpolation.length;i++)\n\t\ttracklet1.interpolation.push(tracklet2.interpolation[i])\n\ttracklet1.interpolation.sort(function(a,b){return a[0]-b[0]})\n\n\t\n\t//存入第一个tracklet\n\tfor (var i = tracklets.length - 1; i >= 0; i--) {\n\t\t\tif(tracklets[i].id == tracklet1.id)\n\t\t\t\ttracklets.splice(i,1,tracklet1);\n\t\t}\n\n\t//删除后一个tracklets\n\tfor (var i = tracklets.length - 1; i >= 0; i--) {\n\t\t\tif(tracklets[i].id == tracklet2.id)\n\t\t\t\ttracklets.splice(i,1);\n\t\t}\n\tselected.splice(1,1)\n\n}\n\nfunction cutline(){\n\t\n\tconsole.log(d3.selectAll(\".enable\").size())\n\tif(d3.select(\"#wsbuttong-2\").selectAll(\".enable\").size()==0)//改成0\n\t\treturn 0;\n\tconsole.log(\"cut\")\n\n\tvar tracklet1=selected[0]\n\t//获取interpolation中位置\n\n\tvar index_inter\n\tfor(var i=0;i<tracklet1.interpolation.length;i++){\n\t\tif(frame>=tracklet1.interpolation[i][0]&&frame<=tracklet1.interpolation[i][1]){\n\t\t\tindex_inter=i;\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i==tracklet1.interpolation.length){\n\t\tconsole.log(\"solid cut\")\n\n\t\treturn;\n\t}\n\t\n\n\t// console.log(tracklet1)\n\t// console.log(index_inter)\n\t//创建新tracklet\n\tvar tracklet2={}\n\ttracklet2.id=setNewId()\n\ttracklet2.color=getColorByID(tracklet2.id)\n\t//调整end_frame和start_frame\n\ttracklet2.start_frame=tracklet1.interpolation[index_inter][1]+1\n\ttracklet2.end_frame=tracklet1.end_frame\n\t//分离interpolation\n\ttracklet2.interpolation=[]\n\tfor(var i=0;i<tracklet1.interpolation.length;i++){\n\t\tif(tracklet1.interpolation[i][0]>=tracklet2.start_frame)\n\t\t\ttracklet2.interpolation.push(tracklet1.interpolation[i])\n\t}\n\t//复制boxes\n\ttracklet2.boxes=[]\n\tfor(var i=tracklet2.start_frame;i<=tracklet2.end_frame;i++){\n\t\ttracklet2.boxes.push(tracklet1.boxes[i-tracklet1.start_frame])\n\t}\n\n\n\t//剪切旧tracklet\n\t//调整end_frame\n\ttracklet1.end_frame=tracklet1.interpolation[index_inter][0]-1\n\t//分离interpolation\n\tfor(var i=0;i<tracklet1.interpolation.length;i++){\n\t\tif(tracklet1.interpolation[i][0]>=tracklet1.end_frame)\n\t\t\ttracklet1.interpolation.splice(i,1)\n\t}\n\t//删除boxes\n\ttracklet1.boxes.splice(tracklet1.end_frame-tracklet1.start_frame+1)\n\n\ttracklet2.status=\"selected\"\n\ttracklets.push(tracklet2)\n\tselected.push(tracklet2)\n\n\t// console.log(tracklet1)\n\t// console.log(tracklet2)\n}\n\nfunction setNewId(){\n\t//设置新ID\n\tvar maxid=0;\n\tfor(var i=0;i<tracklets.length;i++){\n\t\tif(tracklets[i].id>maxid)\n\t\t\tmaxid=tracklets[i].id\n\t}\n\treturn maxid+1\n}\n\n\nfunction selectLineX1(d){\n\tvar fps=source_video.fps\n\tvar p\n\tif(d.start_frame>=frame+future_duration-fps)\n\t\tp=frame+future_duration-fps\n\telse if(d.end_frame<=frame-past_duration+fps)\n\t\tp=frame-past_duration+fps-(end_frame-start_frame)\n\telse\n\t\tp=d.start_frame\n\n\tconsole.log(\"start\"+p)\n\treturn width_graph*Math.max((p-(frame-past_duration))/(past_duration+future_duration),0)\n}\n\nfunction selectLineX2(d){\n\tvar fps=source_video.fps\n\tvar p\n\tif(d.start_frame>=frame+future_duration-fps)\n\t\tp=frame+future_duration-fps+(end_frame-start_frame)\n\telse if(d.end_frame<=frame-past_duration+fps)\n\t\tp=frame-past_duration+fps\n\telse\n\t\tp=d.end_frame\n\n\tconsole.log(\"end:\"+p)\n\treturn width_graph*Math.min((p-(frame-past_duration))/(past_duration+future_duration),1)\n}\n\nfunction load(){\n\tdocument.getElementById(\"uploadFile\").click(); \n}\n\nfunction readLocalFile () {\n        \n        var localFile = document.getElementById(\"uploadFile\").files[0];\n\n        var reader = new FileReader();\n       \n        reader.readAsText(localFile)\n        reader.onload=function(f){  \n        var result=document.getElementById(\"fileContent\");  \n    \n        var newdata=JSON.parse(this.result)\n        \n        tracklets = initData(newdata);\n    } \n        \n}\n\nfunction save(){\n\tvar blob = new Blob([JSON.stringify(tracklets)], { type: \"\" });\n\tsaveAs(blob, \"tracklets.json\");\n\n}\n\nfunction indexS(index, d) {\n\tindex = d3.min([index, d[\"boxes\"].length-1]);\n\tindex = d3.max([0, index])\n\treturn index;\n}\n\n",
			"file": "assets/js/utilities.js",
			"file_size": 7853,
			"file_write_time": 131922844237384897,
			"settings":
			{
				"buffer_size": 7424,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "assets/js/workspace.js",
			"settings":
			{
				"buffer_size": 12450,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/C++.sublime-build",
					""
				],
				[
					"Packages/User/C++.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/C++.sublime-build",
					""
				],
				[
					"Packages/User/C++.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/User/C.sublime-build",
					""
				],
				[
					"Packages/User/C.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control:  ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 565.0
	},
	"console":
	{
		"height": 199.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Apache24/htdocs/PosFlow"
	],
	"file_history":
	[
		"/C/Apache24/htdocs/PosFlow/assets/js/test.js",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab4/HW4_3160104317_HouXinli/CamCalib/CamCalib/src/main.cpp",
		"/C/Apache24/htdocs/resources/PosFlow/tracklets.json",
		"/D/Xinli/Univ/JuniorS1/Cross_Media_Visualization/Vis_Lab/Lab2/main.js",
		"/C/Apache24/htdocs/PosFlow/assets/css/style.css",
		"/C/Apache24/htdocs/PosFlow/index.html",
		"/C/Apache24/htdocs/PosFlow/test.html",
		"/C/Apache24/htdocs/PosFlow/assets/js/main.js",
		"/C/Apache24/htdocs/PosFlow/assets/js/header.js",
		"/D/bf28df832e8a367fa4ddd268c011add5/目录说明.txt",
		"/C/Apache24/htdocs/VidAssist/src/js/customAPI.js",
		"/C/Apache24/htdocs/VidAssist/src/css/myStyle.css",
		"/C/Apache24/htdocs/VidAssist/src/js/videoSVG.js",
		"/D/Xinli/Univ/JuniorS1/Digital_Assets_Management/Homeworks/HW02/hello.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/config-BGP-170614v5.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R3#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R7#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R9#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R8#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R6#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R5#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R4#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R1#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab6/170614/R2#show run",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/.gitignore",
		"/C/Users/DELL/AppData/Local/Temp/BNZ.5c34ab761aa9f16/检测.txt",
		"/C/Users/DELL/AppData/Local/Temp/BNZ.5c34ab701aa8a07/手工.txt",
		"/C/Apache24/htdocs/VidAssist/src/js/controls.js",
		"/D/Xinli/GitHub/houxinli/MyPlugin/top10/manifest.json",
		"/D/Xinli/GitHub/houxinli/MyPlugin/top10/js/top10.js",
		"/D/Xinli/GitHub/houxinli/MyPlugin/98heat/manifest.json",
		"/C/Apache24/htdocs/VidAssist/src/css/video.css",
		"/C/Apache24/htdocs/VidAssist/src/js/video.js",
		"/C/Apache24/htdocs/VidAssist/src/js/header.js",
		"/C/Apache24/htdocs/PosFlow/assets/js/base.js",
		"/C/Apache24/htdocs/PosFlow/assets/js/md5.js",
		"/C/Apache24/htdocs/PosFlow/assets/js/update.js",
		"/C/Apache24/htdocs/PosFlow/assets/js/live.js",
		"/C/Apache24/htdocs/PosFlow/test.php",
		"/D/Xinli/GitHub/houxinli/MelodyEva/web/realtime.html",
		"/D/Xinli/GitHub/houxinli/MelodyEva/main.py",
		"/D/Xinli/GitHub/houxinli/MelodyEva/pa_test.py",
		"/C/Apache24/htdocs/PosFlow/test.js",
		"/D/Xinli/Univ/SophomoreS1/Image_Processing_2017/HW06/LeNet-5.py",
		"/D/Xinli/GitHub/houxinli/MelodyEva/web/index.html",
		"/C/Apache24/htdocs/SRTP/visualization/learn/d3/d3.js",
		"/C/Apache24/htdocs/VidAssist/index.html",
		"/C/Apache24/htdocs/PosFlow/assets/style.css",
		"/D/Xinli/GitHub/houxinli/wiliwili/src/routes/post.js",
		"/D/Xinli/Univ/GRE/README.txt",
		"/D/Xinli/Univ/GRE/考满分1000 词汇 long list en.txt",
		"/D/Xinli/Univ/GRE/阅读 词汇.txt",
		"/D/Xinli/Univ/GRE/佛脚词/0-4.txt",
		"/D/Xinli/Univ/GRE/考满分1000 词汇 mid list.txt",
		"/D/Xinli/Univ/GRE/考满分1000 词汇 long list.txt",
		"/D/Xinli/Univ/GRE/佛脚词/long list v1.0.txt",
		"/D/Xinli/Univ/GRE/佛脚词/special list.txt",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/结题/源代码/my_realtime/pa_test.py",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/结题/源代码/my_realtime/au/pitch_analyzer.py",
		"/D/Xinli/GitHub/houxinli/MelodyEva/ph/t.txt",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/结题/源代码/my_realtime/eel0.1.py",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/my_realtime/test1.py",
		"/D/Xinli/Univ/JuniorS1/Cross_Media_Visualization/Vis_Lab/Lab2/index.html",
		"/C/Apache24/htdocs/resources/PosFlow/source/tracklets.json",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/server.cpp",
		"/C/Apache24/htdocs/VidAssist/src/js/ball.js",
		"/C/Apache24/htdocs/VidAssist/src/js/position.js",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/结题/源代码/music3.0/js/singer.js",
		"/D/Xinli/Univ/JuniorS1/Digital_Media_Processing/Project/结题/源代码/MyServe/manage.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/socket/server.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/message.h",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/HttpRequest.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/HttpRequest.h",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/copy.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/client.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/message.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/code/client.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/code/message.h",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/code/server.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/code/makefile",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/Lab7_Socket/侯昕李_3160104317+ 杨赟_3160102543_实验七/src/server.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/test/a.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/Makefile",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/client.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/src/Makefile.make",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/htdocs/html/test.html",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab8/Lab8_Server/htdocs/txt/test.txt",
		"/D/Xinli/Univ/JuniorS1/Operating_Systems/OS_Lab/Lab1/deadlock/deadlock.h",
		"/D/Xinli/Univ/JuniorS1/Operating_Systems/OS_Lab/Lab1/deadlock/deadlock.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/Lab7_Socket/侯昕李_3160104317+ 杨赟_3160102543_实验七/src/client.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/Lab7_Socket/侯昕李_3160104317+ 杨赟_3160102543_实验七/src/message.h",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/code/README.md",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab7/Lab7_Socket/源.cpp",
		"/D/Xinli/Univ/JuniorS1/Operating_Systems/OS_Lab/Lab1/deadlock/deadlock.c",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_19-04.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_19-03.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_19-02.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_18-01_from_disk.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab1/HW1_3160104317_HouXinli.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab1/Homework1.pdf",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_20-01.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_20-02.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab4/CamCalib/Project1/src/example_11-03.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab4/CamCalib/Project1/src/example_12-01.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_19-01.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab2/Harris.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/pre.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/Lab3_1.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_11-01.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/Learning-OpenCV-3_examples-master/example_11-02.cpp",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab4/CamCalib/x64/Debug/img/birdseye/intrinsics.xml",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/data/s41/2.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/data/s1/1.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R4.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R6.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R9.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R7.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R8.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R5.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/R3.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/R2.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/R1.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Networks/Experiment/Lab5/routers/R10.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/HW3_3160104317_HouXinli.py",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/data/s41/1.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/Mu.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/fr.txt",
		"/D/Xinli/Univ/JuniorS1/Computer_Vision/CV_Lab/Lab3/model.txt"
	],
	"find":
	{
		"height": 40.8
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"cut_button",
			"cut",
			"indexS",
			");\n",
			"index_s",
			"argument",
			"t_dashGenerator",
			"argument",
			"dash_index",
			"t_dashGenerator",
			"25",
			"t_dashGenerator",
			"d.",
			"boxes",
			"s_dashGenerator",
			"birdseye",
			"sequentialScale",
			"birdseyeTransition",
			"box",
			"birdseyeTransition",
			"dashArrayGenerator",
			"start_index",
			"end_index",
			"start_index",
			"max",
			"mouseclick",
			"mouse[0]",
			"controls_data",
			"progress_bar",
			"argument",
			"mouseout",
			"event",
			"mouseout",
			"progress_bar",
			"mouseout",
			"controls_data",
			"mouseclick",
			"mouseout",
			"property",
			"mouseout",
			"argument",
			"mousedown",
			"interval",
			"fps",
			"update",
			"previous",
			"precious",
			"previous",
			"false",
			"tracklet",
			"current_tracklets",
			"getTrackletsByFrame",
			"end_frame",
			"start_frame",
			"current_tracklets",
			"getPlayerTransform",
			"path_data",
			"current_tracklets",
			")\n",
			"path_data",
			"current_tracklets",
			"pathBasepoint",
			"trackGenerator",
			"1",
			"allowed",
			"x",
			"pathBasepoint",
			"pos",
			"getPlayerPathTransform",
			"pathBasepoint",
			"getPlayerPathTransform",
			"getPlayerTransform",
			"paths",
			"players",
			"path",
			"paths",
			"path",
			"new_players",
			"players",
			"main",
			"players",
			"isDash",
			"past_duration",
			"5 * source_video.fps",
			"Gener",
			"argument",
			"d3",
			"10",
			"Math",
			".",
			".\n",
			"，",
			",",
			"updateMonitor",
			"updateMain",
			"updateMonitor",
			"timer_Moniter",
			"updateMain",
			"updateMonitor",
			"initData",
			"argument",
			"instanceof",
			"selected_num",
			"getPlayerTransform",
			"interpolation",
			"end_index",
			"field",
			"initHeader",
			"argument",
			"initLayout",
			"video",
			"row",
			"layout",
			"initVideo",
			"viewport",
			"initSVG",
			"initHeader",
			"init",
			"initHeader",
			"viewBox",
			"trackG",
			"new_tracks",
			"dispatch",
			"diapatch",
			"this",
			"argument",
			"refresh",
			"end_index"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "assets/js/birdseye.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4564,
						"regions":
						{
						},
						"selection":
						[
							[
								4519,
								4519
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										3832,
										3833
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										894,
										895
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4518,
										4519
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4473,
										4474
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 698,
						"regions":
						{
						},
						"selection":
						[
							[
								343,
								343
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										14,
										15
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/angle_bracket.png",
										"region.orangish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "assets/js/base.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5200,
						"regions":
						{
						},
						"selection":
						[
							[
								2630,
								2630
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										3150,
										3151
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2362,
										2363
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3150,
										3151
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2362,
										2363
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4705.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "assets/js/monitor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10990,
						"regions":
						{
						},
						"selection":
						[
							[
								8229,
								8229
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										8230,
										8231
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										8219,
										8220
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										8230,
										8231
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										8219,
										8220
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5806.4,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "assets/js/utilities.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7424,
						"regions":
						{
						},
						"selection":
						[
							[
								4539,
								4539
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										5796,
										5797
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4168,
										4169
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4552,
										4553
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4516,
										4517
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2814.4,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "assets/js/workspace.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12450,
						"regions":
						{
						},
						"selection":
						[
							[
								6189,
								6189
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										6270,
										6271
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										6227,
										6228
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6415,
										6416
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										6041,
										6042
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3706.4,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.4
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.476305869682,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 170.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "PosFlow.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 50.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
